#include <iostream>

struct CircularBuffer {
	int value;
	CircularBuffer* next;

	CircularBuffer(int val) : value(val), next(nullptr) {}
};

int josephus_circle(CircularBuffer* start, int k) {
	CircularBuffer* current = start;
	while (current->next != current) {
		for (int i = 1; i < k; i++) {
			current = current->next;
		}
		CircularBuffer* node_to_remove = current->next;
		current->next = node_to_remove->next;
		std::cout << "Dead: " << node_to_remove->value << std::endl;
		delete node_to_remove;
	}
	return current->value;
}

// second method using dynamic arrays

int josephus_array(int* arr, int n, int k) {
	int index = 0;
	std::cout << "using array: " << std::endl;
	while (n > 1) {
		index = (index + k - 1) % n;
		std::cout << "Removed node with value " << arr[index] << std::endl;
		for (int i = index; i < n - 1; i++) {
			arr[i] = arr[i + 1];
		}
		n--;
	}
	return arr[0];
}

int main() {
	const int n = 5;
	int k = 3;
	CircularBuffer* start = new CircularBuffer(1);
	CircularBuffer* arr_cb[n];
	arr_cb[1] = start;
	for (int i = 2; i <= n; ++i) {
		arr_cb[i] = new CircularBuffer(i);
		arr_cb[i - 1]->next = arr_cb[i];
	}
	arr_cb[n]->next = arr_cb[1];
	std::cout << "Last standing: " << josephus_circle(arr_cb[n], k) << std::endl;
	int arr_da[] = { 1, 2, 3, 4, 5 };
	std::cout << "place to stand on: " << josephus_array(arr_da, n, k) << std::endl;
	return 0;
}
