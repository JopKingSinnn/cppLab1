#include <iostream>
using namespace std;

struct DynamicArray {
	int* elements = nullptr;
	unsigned capacity = 0, size = 0;
};

DynamicArray new_array(unsigned size, int init_val = 0) {
    DynamicArray da;
    da.size = size;
    da.capacity = size*3/2 + 1; // вычисляем capacity как size * 1.5, округлённый вверх
    da.elements = new int[da.capacity];
    for (unsigned i = 0; i < size; i++)
        da.elements[i] = init_val;
    return da;
}

void erase(DynamicArray& da) {
    delete[] da.elements;
    da.elements = nullptr;
    da.size = 0;
    da.capacity = 0;
}

DynamicArray& reserve(DynamicArray& da, unsigned capacity) {

    int* newElements = new int[capacity];
    for (unsigned i = 0; i < da.size; i++) {
        newElements[i] = da.elements[i];
    }

    delete[] da.elements;
    da.elements = newElements;
    da.capacity = capacity;

    return da;
}

DynamicArray clone(DynamicArray& da) {
    DynamicArray newDa;
    newDa.elements = new int[da.size];
    for (unsigned i = 0; i < da.size; i++) {
        newDa.elements[i] = da.elements[i];
    }
    newDa.size = da.size;
    newDa.capacity = da.size;
    return newDa;
}

DynamicArray& assign(DynamicArray const& src, DynamicArray& dst) {
    if (src.capacity > dst.capacity) {
        reserve(dst, src.capacity);
    }

    for (unsigned i = 0; i < src.size; i++) {
        dst.elements[i] = src.elements[i];
    }

    dst.size = src.size;
    return dst;
}

DynamicArray& push_back(DynamicArray& da, int val) {
    if (da.size >= da.capacity) {
        reserve(da, da.capacity * 2);
    }

    da.elements[da.size] = val;
    da.size++;

    return da;
}

int main() {
    //new_array, erase
    DynamicArray array = new_array(20, 121);
    cout << array.elements[3] << endl;
    erase(array);
    //clone
    DynamicArray array_3 = clone(array);
    cout << array_3.elements[10] << endl;
    //assign
    DynamicArray array_4 = new_array(10, 327);
    DynamicArray array_5 = new_array(7, 43);
    cout << array_5.elements[9] << endl;
    array_5 = assign(array_4, array_5);
    cout << array_5.elements[9] << endl;
    //push_back
    DynamicArray array_6 = new_array(10, 45);
    push_back(array_6, 9);
    cout << array_6.elements[10] << endl;

}
