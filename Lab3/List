#include <iostream>
using namespace std;

struct LinkedList {
    int value;
    LinkedList* next;
};

LinkedList* insert_after(LinkedList* const current, int value) {
    LinkedList* new_elem = new LinkedList{ value, nullptr };
    if (current != nullptr) {
        new_elem->next = current->next;
        current->next = new_elem;
    }
    return new_elem;
}

LinkedList* remove_after(LinkedList* const current) {
    if (current == nullptr) {
        return nullptr;
    }
    LinkedList* next_elem = current->next;
    if (next_elem != nullptr) {
        current->next = next_elem->next;
        delete next_elem;
    }
    return current->next;
}

void erase(LinkedList* const head) {
    LinkedList* current = head;
    while (current != nullptr) {
        LinkedList* next_elem = current->next;
        delete current;
        current = next_elem;
    }
}

LinkedList* reverse_rec(LinkedList* const head) {
    if (head == nullptr) {
        return nullptr;
    }
    if (head->next == nullptr) {
        return head;
    }
    LinkedList* const new_head = reverse_rec(head->next);
    head->next->next = head;
    head->next = nullptr;
    return new_head;
}

LinkedList* reverse_itr(LinkedList* const head) {
    LinkedList* previous = nullptr;
    LinkedList* current = head;
    while (current != nullptr) {
        LinkedList* const next_elem = current->next;
        current->next = previous;
        previous = current;
        current = next_elem;
    }
    return previous;
}

int main() {
    LinkedList* head = insert_after(nullptr, 1);
    LinkedList* elem2 = insert_after(head, 2);
    insert_after(elem2, 3);
    cout << "List: ";
    for (LinkedList* current = head; current != nullptr; current = current->next) {
        cout << current->value << ' ';
    }
    cout << std::endl;

    cout << "Reverse list recursively: ";
    LinkedList* reverse_head = reverse_rec(head);
    for (LinkedList* current = reverse_head; current != nullptr; current = current->next) {
        cout << current->value << ' ';
    }
    cout << std::endl;

    cout << "Reverse list iteratively: ";
    reverse_head = reverse_itr(reverse_head);
    for (LinkedList* current = reverse_head; current != nullptr; current = current->next) {
        cout << current->value << ' ';
    }
    cout << std::endl;

    erase(reverse_head);

    return 0;
}
