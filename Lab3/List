#include <iostream>

struct LinkedList {
int value;
LinkedList* next;

LinkedList(int val = 0, LinkedList* n = nullptr) : value(val), next(n) {}
};

LinkedList* insert_after(LinkedList* const current, int val) {
LinkedList* new_node = new LinkedList(val, nullptr);
if (!current) {
return new_node;
}
new_node->next = current->next;
current->next = new_node;
return new_node;
}

LinkedList* remove_after(LinkedList* const current) {
if (!current || !current->next) {
return nullptr;
}
LinkedList* node_to_delete = current->next;
current->next = current->next->next;
delete node_to_delete;
return current->next;
}

void erase(LinkedList* const head) {
LinkedList* current = head;
while (current) {
LinkedList* next_node = current->next;
delete current;
current = next_node;
}
}

LinkedList* reverse_rec(LinkedList* const head) {
if (!head || !head->next) {
return head;
}
LinkedList* new_head = reverse_rec(head->next);
head->next->next = head;
head->next = nullptr;
return new_head;
}

LinkedList* reverse_itr(LinkedList* const head) {
LinkedList* prev_node = nullptr;
LinkedList* current_node = head;
while (current_node) {
LinkedList* next_node = current_node->next;
current_node->next = prev_node;
prev_node = current_node;
current_node = next_node;
}
return prev_node;
}

int main() {
LinkedList* head = nullptr;
head = insert_after(head, 1); // 1
LinkedList* second_node = insert_after(head, 2); // 1 -> 2
insert_after(second_node, 3); // 1 -> 2 -> 3
remove_after(head); // 1 -> 3
LinkedList* new_head = reverse_rec(head); // 3 -> 1
erase(new_head); // deletes all nodes
return 0;
}
