#include <iostream>
#include <list>
using namespace std;
class HashMapTable
{

	int table_size;

	list<int>* table;
public:

	HashMapTable(int key);

	int hashFunction(int key) {
		return (key % table_size);
	}
	// inserting the key in the hash table
	void insertElement(int key);
	// deleting the key in the hash table
	void deleteElement(int key);
	// displaying the full hash table
	void displayHashTable();
	//finding the key
	bool findElement(int key);

};
//creating the hash table with the given table size
HashMapTable::HashMapTable(int size)
{
	this->table_size = size;
	table = new list<int>[table_size];
}
// insert function to push the keys in hash table
void HashMapTable::insertElement(int key)
{
	int index = hashFunction(key);
	table[index].push_back(key);
}
// delete function to delete the element from the hash table
void HashMapTable::deleteElement(int key)
{
	int index = hashFunction(key);
	// finding the key at the computed index
	list <int> ::iterator i;
	for (i = table[index].begin(); i != table[index].end(); i++)
	{
		if (*i == key)
			break;
	}
	// removing the key from hash table if found
	if (i != table[index].end())
		table[index].erase(i);
}
//display function to find element
bool HashMapTable::findElement(int key)
{
	int index = hashFunction(key);
	// finding the key at the computed index
	list <int> ::iterator i;
	for (i = table[index].begin(); i != table[index].end(); i++)
	{
		if (*i == key)
		{
			cout << "est";
			return true;
			break;

		}


	}
}

// display function to showcase the whole hash table
void HashMapTable::displayHashTable() {
	for (int i = 0; i < table_size; i++) {
		cout << i;
		// traversing at the recent/ current index
		for (auto j : table[i])
			cout << " ==> " << j;
		cout << endl;
	}
}

int main()
{
	// array of all the keys to be inserted in hash table
	int arr[] = { 20, 34, 56, 54, 76, 87 };
	int n = sizeof(arr) / sizeof(arr[0]);


	HashMapTable ht(n);
	for (int i = 0; i < n; i++)
		ht.insertElement(arr[i]);

	ht.deleteElement(34);
	ht.findElement(34);

	ht.displayHashTable();
	return 0;
}
